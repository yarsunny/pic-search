import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { fetchPhotos } from "./homeApi";

const initialState = {
  currentPage: 1,
  totalPages: 0,
  photos: [],
  query: "",
  filters: [],
  status: "init",
};

/** Async actions */
export const getPhotos = createAsyncThunk("home/getPhotos", async (page = 1) => {
  const response = await fetchPhotos(page);
  const totalPhotos = +response.headers.get("X-Total");
  const perPage = +response.headers.get("X-Per-Page");
  const photos = await response.json();
  return {
    photos,
    totalPages: Math.ceil(totalPhotos / perPage),
  };
});

export const homeSlice = createSlice({
  name: "home",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // search: (state, action) => {
    //   state.currentPage = 1;
    //   state.query = action.payload;
    // },
  },

  // Actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getPhotos.pending, (state, action) => {
        state.currentPage = action.meta.arg;
        state.status = "loading";
      })
      .addCase(getPhotos.fulfilled, (state, action) => {
        state.status = "idle";
        state.photos = [...state.photos, ...action.payload.photos];
        state.totalPages = action.payload.totalPages;
      })
      .addCase(getPhotos.rejected, (state, action) => {
        state.status = "idle";
      });
  },
});

//export const { next, previous, search } = homeSlice.actions;

export const selectHome = (state) => state.home;
export default homeSlice.reducer;
