import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { fetchPhotos, searchPhotos } from "./homeApi";

export const initialState = {
  page: 1,
  totalPages: 0,
  per_page: 30,
  photos: [],
  query: "",
  filters: {
    order_by: "relevant",
    color: "any",
    orientation: "any",
  },
  status: "init",
};

/** Async actions */
export const getPhotos = createAsyncThunk(
  "home/getPhotos",
  async (page, thunkAPI) => {
    let { filters, query, per_page } = thunkAPI.getState().home;
    let response;
    let photos = [];

    // Remove filters if value is 'any' as they
    // are applied by default by unsplash
    filters = Object.keys(filters).reduce((result, key) => {
      if (filters[key] !== "any") {
        return {
          ...result,
          [key]: filters[key],
        };
      }
      return result;
    }, {});

    // When search query isn't empty use search api
    if (query !== "") {
      response = await searchPhotos({
        ...filters,
        page,
        query,
        per_page,
      });
      photos = (await response.json()).results;
    }
    // In case of no search string show star wars collection
    else {
      response = await fetchPhotos({
        ...filters,
        page,
        per_page,
      });
      photos = await response.json();
    }

    const totalPhotos = +response.headers.get("X-Total");
    const perPage = +response.headers.get("X-Per-Page");

    return {
      photos,
      totalPages: Math.ceil(totalPhotos / perPage),
    };
  }
);

export const homeSlice = createSlice({
  name: "home",
  initialState,
  reducers: {
    setSearch: (state, action) => {
      state.query = action.payload;
    },
    setFilters: (state, action) => {
      state.filters = action.payload;
    },
    clearFilters: (state) => {
      state.filters = initialState.filters;
    },
  },

  // Actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getPhotos.pending, (state, action) => {
        state.page = action.meta.arg;
        state.status = "loading";
      })
      .addCase(getPhotos.fulfilled, (state, action) => {
        state.status = "idle";
        if (state.page === 1) {
          state.photos = action.payload.photos;
        } else {
          state.photos = [...state.photos, ...action.payload.photos];
        }

        state.totalPages = action.payload.totalPages;
      })
      .addCase(getPhotos.rejected, (state, action) => {
        state.status = "idle";
      });
  },
});

export const { setFilters, setSearch, clearFilters } = homeSlice.actions;
export const selectHome = (state) => state.home;
export default homeSlice.reducer;
